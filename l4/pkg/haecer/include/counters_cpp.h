PerfSystem {
    perfClass(AGU_Events) {
	perfEvent(BYPASS_CANCEL,0xB6,SANDY_BRIDGE)
	    perfUmask(COUNT,0x01,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(ARITH) {
	perfEvent(_GENERIC,0x14,SANDY_BRIDGE|WESTMERE)
	    perfUmask(FPU_DIV_ACTIVE,0x01,SANDY_BRIDGE|WESTMERE)
	    AliasMask(CYCLES_DIV_BUSY,FPU_DIV_ACTIVE) //For Westmere
	    perfUmask(MUL,0x02,WESTMERE)
	END_EVENT
    };
    perfClass(BR) {
    	perfEvent(INST_EXEC,0x88,SANDY_BRIDGE)
		perfUmask(COND,0x01,SANDY_BRIDGE)
		perfUmask(DIRECT_JMP,0x02,SANDY_BRIDGE)
		perfUmask(INDIRECT_JMP_NON_CALL_RET,0x04,SANDY_BRIDGE)
		perfUmask(RETURN_NEAR,0x08,SANDY_BRIDGE)
		perfUmask(DIRECT_NEAR_CALL,0x10,SANDY_BRIDGE)
		perfUmask(INDIRECT_NEAR_CALL,0x20,SANDY_BRIDGE)
		perfUmask(NONTAKEN,0x40,SANDY_BRIDGE)
		perfUmask(TAKEN,0x80,SANDY_BRIDGE)
		perfUmask(ALL_BRANCHES,0xFF,SANDY_BRIDGE)
	END_EVENT
	perfEvent(MISP_EXEC,0x89,SANDY_BRIDGE)
		perfUmask(COND,0x01,SANDY_BRIDGE)
		perfUmask(INDIRECT_JMP_NON_CALL_RET,0x04,SANDY_BRIDGE)
		perfUmask(RETURN_NEAR_CALL,0x08,SANDY_BRIDGE)
		perfUmask(DIRECT_NEAR_CALL,0x10,SANDY_BRIDGE)
		perfUmask(INDIRECT_NEAR_CALL,0x20,SANDY_BRIDGE)
		perfUmask(NON_TAKEN,0x40,SANDY_BRIDGE)
		perfUmask(TAKEN,0x80,SANDY_BRIDGE)
		perfUmask(ALL_BRANCHES,0xFF,SANDY_BRIDGE)
	END_EVENT
	perfEvent(INST_RETIRED,0xC4,ANY_CPU)
		perfUmask(ALL_BRANCHES_ARCH,0x00,ANY_CPU)
		perfUmask(CONDITIONAL,0x01,SANDY_BRIDGE)
		perfUmask(NEAR_CALL,0x02,SANDY_BRIDGE)
		perfUmask(ALL_BRANCHES,0x04,SANDY_BRIDGE)
		perfUmask(NEAR_RETURN,0x08,SANDY_BRIDGE)
		perfUmask(NOT_TAKEN,0x10,SANDY_BRIDGE)
		perfUmask(NEAR_TAKEN,0x20,SANDY_BRIDGE)
		perfUmask(FAR_BRANCH,0x40,SANDY_BRIDGE)
	END_EVENT
	perfEvent(MISP_RETIRED,0xC5,ANY_CPU)
		perfUmask(ALL_BRANCHES_ARCH,0x00,ANY_CPU)
		perfUmask(CONDITIONAL,0x01,SANDY_BRIDGE)
		perfUmask(NEAR_CALL,0x02,SANDY_BRIDGE)
		perfUmask(ALL_BRANCHES,0x04,SANDY_BRIDGE)
		perfUmask(NOT_TAKEN,0x10,SANDY_BRIDGE)
		perfUmask(TAKEN,0x20,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(CPL) {
	perfEvent(CYCLES,0x5C,SANDY_BRIDGE)
		perfUmask(RING0,0x01,SANDY_BRIDGE)
		perfUmask(RING123,0x02,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(CPU) {
    	perfEvent(CLK_UNHALTED,0x3C,ANY_CPU)
		perfUmask(THREAD_P,0x00,ANY_CPU)
		perfUmask(REF_XCLK,0x01,ANY_CPU)
	END_EVENT
    };
    perfClass(DSB) {
    	perfEvent(FILL,0xAC,SANDY_BRIDGE)
		perfUmask(OTHER_CANCEL,0x02,SANDY_BRIDGE)
		perfUmask(EXCEED_DSB_LINES,0x08,SANDY_BRIDGE)
		perfUmask(ALL_CANCEL,0x0A,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(DSB2MITE) {
    	perfEvent(SWITCHES,0xAB,SANDY_BRIDGE)
		perfUmask(COUNT,0x01,SANDY_BRIDGE)
		perfUmask(PENALTY_CYCLES,0x02,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(DTLB) {
	perfEvent(LOAD_MISSES,0x08,SANDY_BRIDGE|WESTMERE)
		perfUmask(MISS_CAUSES_A_WALK,0x01,SANDY_BRIDGE|WESTMERE)
		AliasMask(ANY,MISS_CAUSES_A_WALK)	//For Westmere
		perfUmask(WALK_COMPLETED,0x02,SANDY_BRIDGE|WESTMERE)
		perfUmask(WALK_DURATION,0x04,SANDY_BRIDGE|WESTMERE)
		AliasMask(WALK_CYCLES,WALK_DURATION)	//For Westmere
		perfUmask(STLB_HIT,0x10,SANDY_BRIDGE|WESTMERE)
		perfUmask(PDE_MISS,0x20,WESTMERE)
	END_EVENT
	perfEvent(STORE_MISSES,0x49,SANDY_BRIDGE)
		perfUmask(MISS_CAUSES_A_WALK,0x01,SANDY_BRIDGE)
		perfUmask(WALK_COMPLETED,0x02,SANDY_BRIDGE)
		perfUmask(WALK_DURATION,0x04,SANDY_BRIDGE)
		perfUmask(STLB_HIT,0x10,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(FP) {
	perfEvent(COMP_OPS_EXE,0x10,SANDY_BRIDGE|WESTMERE)
		perfUmask(X87,0x01,SANDY_BRIDGE|WESTMERE)
		perfUmask(MMX,0x02,WESTMERE)
		perfUmask(SSE_FP,0x04,WESTMERE)
		perfUmask(SSE2_INTEGER,0x08,WESTMERE)
		perfUmask(SSE_FP_PACKED_DOUBLE,0x10,SANDY_BRIDGE|WESTMERE)
		AliasMask(SSE_FP_PACKED,SSE_FP_PACKED_DOUBLE) //For Westmere
		perfUmask(SSE_FP_SCALAR_SINGLE,0x20,SANDY_BRIDGE|WESTMERE)
		AliasMask(SSE_FP_SCALAR,SSE_FP_SCALAR_SINGLE) //For Westmere
		perfUmask(SSE_PACKED_SINGLE,0x40,SANDY_BRIDGE|WESTMERE)
		AliasMask(SSE_SINGLE_PRECISION,SSE_PACKED_SINGLE) //For Westmere
		perfUmask(SSE_SCALAR_DOUBLE,0x80,SANDY_BRIDGE|WESTMERE)
		AliasMask(SSE_DOUBLE_PRECISION,SSE_SCALAR_DOUBLE) //For Westmere
	END_EVENT
	perfEvent(ASSIST,0xCA,SANDY_BRIDGE)
		perfUmask(X87_OUTPUT,0x02,SANDY_BRIDGE)
		perfUmask(X87_INPUT,0x04,SANDY_BRIDGE)
		perfUmask(SIMD_OUTPUT,0x08,SANDY_BRIDGE)
		perfUmask(SIMD_INPUT,0x10,SANDY_BRIDGE)
		perfUmask(ANY,0x1E,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(HW) {
	perfEvent(PRE_REQ,0x4E,SANDY_BRIDGE)
		perfUmask(DL1_MISS,0x02,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(ICACHE) {
    	perfEvent(_GENERIC,0x80,SANDY_BRIDGE)
		perfUmask(MISSES,0x02,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(IDQ) {
    	perfEvent(_GENERIC,0x79,SANDY_BRIDGE)
		perfUmask(EMPTY,0x02,SANDY_BRIDGE)
		perfUmask(MITE_UOPS,0x04,SANDY_BRIDGE)
		perfUmask(DSB_UOPS,0x08,SANDY_BRIDGE)
		perfUmask(MS_DSB_UOPS,0x10,SANDY_BRIDGE)
		perfUmask(MS_MITE_UOPS,0x20,SANDY_BRIDGE)
		perfUmask(MS_UOPS,0x30,SANDY_BRIDGE)
	END_EVENT
	perfEvent(UOPS_NOT_DELIVERED,0x9C,SANDY_BRIDGE)
		perfUmask(CORE,0x01,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(ILD) {
    	perfEvent(STALL,0x87,SANDY_BRIDGE)
		perfUmask(CP,0x01,SANDY_BRIDGE)
		perfUmask(IQ_FULL,0x04,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(INST) {
    	perfEvent(RETIRED,0xC0,ANY_CPU)
		perfUmask(ANY_P,0x00,ANY_CPU)
//		perfUmask(PREC_DIST,0x01,SANDY_BRIDGE) Complex, only on PCM1 can not be enforced with framework
    		perfUmask(X87,0x02,SANDY_BRIDGE)
	END_EVENT
	//THIS IS ONLY AN ALIAS FOR RENAME IN WESTMERE!
	perfEvent(QUEUE_WRITES,0x17,WESTMERE|SANDY_BRIDGE)
		perfUmask(_GENERIC,0x01,WESTMERE|SANDY_BRIDGE)
	END_EVENT
	//This not ;)
	perfEvent(DECODED,0x18,WESTMERE)
		perfUmask(DEC0,0x01,WESTMERE)
	END_EVENT
	perfEvent(QUEUE_WRITE_CYCLES,0x1E,WESTMERE)
		perfUmask(_GENERIC,0x01,WESTMERE)
	END_EVENT
    };
    perfClass(INSTS) {
	perfEvent(WRITTEN_TO_IQ,0x17,SANDY_BRIDGE|WESTMERE)
		perfUmask(INSTS,0x01,SANDY_BRIDGE|WESTMERE) 
	END_EVENT
    };
    perfClass(INT) {
    	perfEvent(MISC,0x0D,SANDY_BRIDGE)
		perfUmask(RECOVERY_CYCLES,0x03,SANDY_BRIDGE)
		perfUmask(STALL_CYCLES,0x40,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(ITLB) {
    	perfEvent(MISSES,0x85,SANDY_BRIDGE)
		perfUmask(MISS_CAUSES_A_WALK,0x01,SANDY_BRIDGE)
		perfUmask(WALK_COMPLETED,0x02,SANDY_BRIDGE)
		perfUmask(WALK_DURATION,0x04,SANDY_BRIDGE)
		perfUmask(STLB_HIT,0x10,SANDY_BRIDGE)
	END_EVENT
	perfEvent(_GENERIC,0xAE,SANDY_BRIDGE)
		perfUmask(ITLB_FLUSH,0x01,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(L1D) {
/*    	perfEvent(PEND_MISS,0x48,SANDY_BRIDGE)
		perfUmask(PENDING,0x01,SANDY_BRIDGE)
	END_EVENT  We are currently not expressive enough to enforce counter restrictions!*/
	perfEvent(_GENERIC,0x51,SANDY_BRIDGE)
		perfUmask(REPLACEMENT,0x01,SANDY_BRIDGE)
		perfUmask(ALLOCATED_IN_M,0x02,SANDY_BRIDGE)
		perfUmask(EVICTION,0x04,SANDY_BRIDGE)
		perfUmask(ALL_M_REPLACEMENT,0x08,SANDY_BRIDGE)
	END_EVENT
	perfEvent(BLOCKS,0xBF,SANDY_BRIDGE)
		perfUmask(BANK_CONFLICT_CYCLES,0x05,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(L2) {
    	perfEvent(L1D_WB_RQSTS,0x28,SANDY_BRIDGE)
		perfUmask(HIT_E,0x04,SANDY_BRIDGE)
		perfUmask(HIT_M,0x08,SANDY_BRIDGE)
	END_EVENT
	perfEvent(RQSTS,0x24,SANDY_BRIDGE|WESTMERE)
		perfUmask(DEMAND_DATA_RD_HIT,0x01,SANDY_BRIDGE)
		perfUmask(LD_HIT,0x01,WESTMERE) //I think the semantic differs from sandy!
		perfUmask(LD_MISS,0x02,WESTMERE)
		perfUmask(ALL_DEMAND_DATA_RD,0x03,SANDY_BRIDGE|WESTMERE)
		AliasMask(LOADS,ALL_DEMAND_DATA_RD) //Seems to be the same on Westmere
		perfUmask(RFO_HITS,0x04,SANDY_BRIDGE|WESTMERE)
		perfUmask(RFO_MISS,0x08,SANDY_BRIDGE|WESTMERE)
		perfUmask(ALL_RFO,0x0C,SANDY_BRIDGE|WESTMERE)
		AliasMask(RFOS,ALL_RFO) //For Westmere
		perfUmask(CODE_RD_HIT,0x10,SANDY_BRIDGE|WESTMERE)
		AliasMask(IFETCH_HIT,CODE_RD_HIT) //For WEstmere
		perfUmask(CODE_RD_MISS,0x20,SANDY_BRIDGE|WESTMERE)
		AliasMask(IFETCH_MISS,CODE_RD_MISS) //For Westmere
		perfUmask(ALL_CODE_RD,0x30,SANDY_BRIDGE|WESTMERE)
		AliasMask(IFETCHES,ALL_CODE_RD) //For Westmere
		perfUmask(PF_HIT,0x40,SANDY_BRIDGE|WESTMERE)
		AliasMask(PREFETCH_HIT,PF_HIT) //For Westmere
		perfUmask(PF_MISS,0x80,SANDY_BRIDGE|WESTMERE)
		AliasMask(PREFETCH_MISS,PF_MISS) //For Westmere
		perfUmask(ALL_PF,0xC0,SANDY_BRIDGE|WESTMERE)
		AliasMask(PREFETCHES,ALL_PF) //For Westmere
		perfUmask(MISS,0xAA,WESTMERE)
		perfUmask(REFERENCES,0xFF,WESTMERE) 
	END_EVENT
	perfEvent(STORE_LOCK_RQSTS,0x27,SANDY_BRIDGE)
		perfUmask(MISS,0x01,SANDY_BRIDGE)
		perfUmask(HIT_E,0x04,SANDY_BRIDGE)
		perfUmask(HIT_M,0x08,SANDY_BRIDGE)
		perfUmask(ALL,0x0F,SANDY_BRIDGE)
	END_EVENT
	perfEvent(TRANS,0xF0,SANDY_BRIDGE)
		perfUmask(DEMAND_DATA_RD,0x01,SANDY_BRIDGE)
		perfUmask(RFO,0x02,SANDY_BRIDGE)
		perfUmask(CODE_RD,0x04,SANDY_BRIDGE)
		perfUmask(ALL_PF,0x08,SANDY_BRIDGE)
		perfUmask(L1D_WB,0x10,SANDY_BRIDGE)
		perfUmask(L2_FLL,0x20,SANDY_BRIDGE)
		perfUmask(L2_WB,0x40,SANDY_BRIDGE)
		perfUmask(ALL_REQUESTS,0x80,SANDY_BRIDGE)
	END_EVENT
	perfEvent(LINES_IN,0xF1,SANDY_BRIDGE)
		perfUmask(I,0x01,SANDY_BRIDGE)
		perfUmask(S,0x02,SANDY_BRIDGE)
		perfUmask(E,0x04,SANDY_BRIDGE)
		perfUmask(ALL,0x07,SANDY_BRIDGE)
	END_EVENT
	perfEvent(LINES_OUT,0xF2,SANDY_BRIDGE)
		perfUmask(DEMAND_CLEAN,0x01,SANDY_BRIDGE)
		perfUmask(DEMAND_DIRTY,0x02,SANDY_BRIDGE)
		perfUmask(PF_CLEAN,0x04,SANDY_BRIDGE)
		perfUmask(PF_DIRTY,0x08,SANDY_BRIDGE)
		perfUmask(DIRTY_ALL,0x0A,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(LD) {
    	perfEvent(BLOCKS,0x03,SANDY_BRIDGE)
		perfUmask(UNKNOWN,0x01,SANDY_BRIDGE)
		perfUmask(STORE_FORWARD,0x02,SANDY_BRIDGE)
		perfUmask(NO_SR,0x08,SANDY_BRIDGE)
		perfUmask(ALL_BLOCK,0x10,SANDY_BRIDGE)
	END_EVENT
	perfEvent(BLOCKS_PARTIAL,0x07,SANDY_BRIDGE)
		perfUmask(ADDRESS_ALIAS,0x01,SANDY_BRIDGE)
		perfUmask(ALL_STA_BLOCKS,0x08,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(LOAD) {
    	perfEvent(HIT_PRE,0x4C,SANDY_BRIDGE)
		perfUmask(SW_PF,0x01,SANDY_BRIDGE)
		perfUmask(HW_PF,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(BLOCK,0x03,WESTMERE)
		perfUmask(OVERLAP_STORE,0x02,WESTMERE)
	END_EVENT
	perfEvent(DISPATCH,0x13,WESTMERE)
		perfUmask(RS,0x01,WESTMERE)
		perfUmask(RS_DELAYED,0x02,WESTMERE)
		perfUmask(MOB,0x04,WESTMERE)
		perfUmask(ANY,0x07,WESTMERE)
	END_EVENT
    };
//    perfClass(LOCK) { //TODO: Conflicts with ferret?!
//    	perfEvent(CYCLES,0x63,SANDY_BRIDGE)
//		perfUmask(SPLIT_LOCK_UC_LOCK_DURATION,0x01,SANDY_BRIDGE)
//		perfUmask(CACHE_LOCK_DURATION,0x02,SANDY_BRIDGE)
//	END_EVENT
//    };
    perfClass(LONGEST) {
    	perfEvent(LAT_CACHE,0x2E,ANY_CPU)
		perfUmask(REFERENCE,0x4F,ANY_CPU)
		perfUmask(MISS,0x41,ANY_CPU)
	END_EVENT
    };
    perfClass(LSD) {
	perfEvent(_OVERFLOW,0x20,WESTMERE)
		perfUmask(_GENERIC,0x01,WESTMERE)
	END_EVENT
    };
    perfClass(MACHINE) {
    	perfEvent(CLEARS,0xC3,SANDY_BRIDGE)
		perfUmask(MEMORY_ORDERING,0x02,SANDY_BRIDGE)
		perfUmask(SMC,0x04,SANDY_BRIDGE)
		perfUmask(MASKMOV,0x20,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(MEM) {
    	perfEvent(TRANS_RETIRED,0xCD,SANDY_BRIDGE)
		perfUmask(LOAD_LATENCY,0x01,SANDY_BRIDGE)
		perfUmask(PRECISE_STORE,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(UOP_RETIRED,0xD0,SANDY_BRIDGE)
		perfUmask(LOADS,0x01,SANDY_BRIDGE)
		perfUmask(STORES,0x02,SANDY_BRIDGE)
		perfUmask(STLB_MISS,0x10,SANDY_BRIDGE)
//		perfUmask(LOCK,0x20,SANDY_BRIDGE) //Conflicts with ferret
		perfUmask(SPLIT,0x40,SANDY_BRIDGE)
		perfUmask(ALL,0x80,SANDY_BRIDGE)
	END_EVENT
	perfEvent(LOAD_UOPS_RETIRED,0xD1,SANDY_BRIDGE)
		perfUmask(L1_HIT,0x01,SANDY_BRIDGE)
		perfUmask(L2_HIT,0x02,SANDY_BRIDGE)
		perfUmask(LLC_HIT,0x04,SANDY_BRIDGE)
		perfUmask(HIT_LFB,0x40,SANDY_BRIDGE)
	END_EVENT
	perfEvent(LOAD_UOPS_LLC_HIT_RETIRED,0xD2,SANDY_BRIDGE)
		perfUmask(XSNP_MISS,0x01,SANDY_BRIDGE)
		perfUmask(XSNP_HIT,0x02,SANDY_BRIDGE)
		perfUmask(XSNP_HITM,0x04,SANDY_BRIDGE)
		perfUmask(XSNP_NONE,0x08,SANDY_BRIDGE)
	END_EVENT
	perfEvent(LOAD_UOPS_MISC_RETIRED,0xD4,SANDY_BRIDGE)
		perfUmask(LLC_MISS,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(INST_RETIRED,0x0B,WESTMERE)
		perfUmask(LOADS,0x01,WESTMERE)
		perfUmask(STORES,0x02,WESTMERE)
		perfUmask(LATENCY_ABOVE_THRESHOLD,0x10,WESTMERE)
	END_EVENT
	perfEvent(STORE_RETIRED,0x0C,WESTMERE)
		perfUmask(DTLB_MISS,0x01,WESTMERE)
	END_EVENT
/*	perfEvent(UNCORE_RETIRED,0x0F,WESTMERE) only available on 2 socket machines... how to test that?
		perfUmask(UNKNOWN_SOURCE,0x01,WESTMERE)
		perfUmask(OTHER_CORE_L2_HIT,0x02,WESTMERE)
		perfUmask(REMOTE_HITM,0x04,WESTMERE)
		perfUmask(LOCAL_DRAM_AND_REMOTE_CACHE_HIT,0x08,WESTMERE)
		perfUmask(REMOTE_DRAM,0x10,WESTMERE)
		perfUmask(OTHER_LLC_MISS,0x20,WESTMERE)
		perfUmask(UNCACHABLE,0x80,WESTMERE)
	END_EVENT*/
    };
    perfClass(MISALIGN) {
    	perfEvent(MEM_REF,0x05,SANDY_BRIDGE)
		perfUmask(LOADS,0x01,SANDY_BRIDGE)
		perfUmask(STORES,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(MEMORY,0x05,WESTMERE)
		perfUmask(STORE,0x02,WESTMERE)
	END_EVENT
    };
    perfClass(OFF_CORE) {
    	perfEvent(RESPONSE_0,0xB7,SANDY_BRIDGE)
		perfUmask(_GENERIC,0x01,SANDY_BRIDGE)
	END_EVENT
	perfEvent(RESPONSE_1,0xBB,SANDY_BRIDGE)
		perfUmask(_GENERIC,0x01,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(OFFCORE) {
    	perfEvent(REQUESTS_OUTSTANDING,0x60,SANDY_BRIDGE)
		perfUmask(DEMAND_DATA_RD,0x01,SANDY_BRIDGE)
		perfUmask(DEMAND_RFO,0x04,SANDY_BRIDGE)
		perfUmask(ALL_DATA_RD,0x08,SANDY_BRIDGE)
	END_EVENT
	perfEvent(REQUESTS,0xB0,SANDY_BRIDGE)
		perfUmask(DEMAND_DATA_RD,0x01,SANDY_BRIDGE)
		perfUmask(DEMAND_RFO,0x04,SANDY_BRIDGE)
		perfUmask(ALL_DATA_RD,0x08,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(OTHER) {
    	perfEvent(ASSISTS,0xC1,SANDY_BRIDGE)
		perfUmask(ITLB_MISS_RETIRED,0x02,SANDY_BRIDGE)
		perfUmask(AVX_STORE,0x08,SANDY_BRIDGE)
		perfUmask(AVX_TO_SSE,0x10,SANDY_BRIDGE)
		perfUmask(SSE_TO_AVX,0x20,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(PARTIAL) {
	perfEvent(RAT_STALLS,0x59,SANDY_BRIDGE)
		perfUmask(FLAGS_MERGE_UOP,0x20,SANDY_BRIDGE)
		perfUmask(SLOW_LEA_WINDOW,0x40,SANDY_BRIDGE)
		perfUmask(MUL_SINGLE_UOP,0x80,SANDY_BRIDGE)
	END_EVENT
	perfEvent(ADDRESS_ALIAS,0x07,WESTMERE) 
		perfUmask(_GENERIC,0x01,WESTMERE)
	END_EVENT
    };
    perfClass(RESOURCE) {
    	perfEvent(STALLS2,0x5B,SANDY_BRIDGE)
		perfUmask(ALL_FL_EMPTY,0x0C,SANDY_BRIDGE)
		perfUmask(APP_PRF_CONTROL,0x0F,SANDY_BRIDGE)
		perfUmask(BOB_FULL,0x40,SANDY_BRIDGE)
		perfUmask(OOO_RSRC,0x4F,SANDY_BRIDGE)
	END_EVENT
	perfEvent(STALLS,0xA2,SANDY_BRIDGE)
		perfUmask(ANY,0x01,SANDY_BRIDGE)
		perfUmask(LB,0x02,SANDY_BRIDGE)
		perfUmask(RS,0x04,SANDY_BRIDGE)
		perfUmask(SB,0x08,SANDY_BRIDGE)
		perfUmask(ROB,0x10,SANDY_BRIDGE)
		perfUmask(FCSW,0x20,SANDY_BRIDGE)
		perfUmask(MXCSR,0x40,SANDY_BRIDGE)
		perfUmask(OTHER,0x80,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(ROB) {
    	perfEvent(MISC_EVENTS,0xCC,SANDY_BRIDGE)
		perfUmask(LBR_INSERTS,0x20,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(RS) {
    	perfEvent(EVENTS,0x5E,SANDY_BRIDGE)
		perfUmask(EMPTY_CYCLES,0x01,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(SB) {
    	perfEvent(DRAIN,0x04,WESTMERE)
		perfUmask(ANY,0x07,WESTMERE)
	END_EVENT
    };
    perfClass(SIMD) {
    	perfEvent(FP_256,0x11,SANDY_BRIDGE)
		perfUmask(PACKED_SINGLE,0x01,SANDY_BRIDGE)
		perfUmask(PACKED_DOUBLE,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(INT_128,0x12,WESTMERE)
		perfUmask(PACKED_MPY,0x01,WESTMERE)
		perfUmask(PACKED_SHIFT,0x02,WESTMERE)
		perfUmask(PACK,0x04,WESTMERE)
		perfUmask(UNPACK,0x08,WESTMERE)
		perfUmask(PACKED_LOGICAL,0x10,WESTMERE)
		perfUmask(PACKED_ARITH,0x20,WESTMERE)
		perfUmask(SHIFFLE_MOVE,0x40,WESTMERE)
	END_EVENT
    };
    perfClass(SQ) {
    	perfEvent(MISC,0xF4,SANDY_BRIDGE)
		perfUmask(SPLIT_LOCK,0x10,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(STORE) {
	perfEvent(BLOCKS,0x06,WESTMERE)
		perfUmask(AT_RET,0x04,WESTMERE)
		perfUmask(L1D_BLOCK,0x08,WESTMERE)
	END_EVENT
    };
    perfClass(TLB) {
    	perfEvent(FLUSH,0xBD,SANDY_BRIDGE)
		perfUmask(DTLB_THREAD,0x01,SANDY_BRIDGE)
		perfUmask(STLB_ANY,0x20,SANDY_BRIDGE)
	END_EVENT
    };
    perfClass(TWO_UOP) {
    	perfEvent(INSTS_DECODED,0x19,WESTMERE)
		perfUmask(_GENERIC,0x01,WESTMERE)
	END_EVENT
    };
    perfClass(UOPS) {
	perfEvent(ISSUED,0x0E,SANDY_BRIDGE|WESTMERE)
		perfUmask(ANY,0x01,SANDY_BRIDGE|WESTMERE)
		//perfUmask(STALLED_CYCLES,0x01,WESTMERE) Needs ivert = 1, cmask = 1! Can not be modeled
		perfUmask(FUSED,0x02,WESTMERE)
	END_EVENT
	perfEvent(DISPATCHED_PORT,0xA1,SANDY_BRIDGE)
		perfUmask(PORT_0,0x01,SANDY_BRIDGE)
		perfUmask(PORT_1,0x02,SANDY_BRIDGE)
		perfUmask(PORT_2_LD,0x04,SANDY_BRIDGE)
		perfUmask(PORT_2_STA,0x08,SANDY_BRIDGE)
		perfUmask(PORT_2,0x0C,SANDY_BRIDGE)
		perfUmask(PORT_3_LD,0x10,SANDY_BRIDGE)
		perfUmask(PORT_3_STA,0x20,SANDY_BRIDGE)
		perfUmask(PORT_3,0x30,SANDY_BRIDGE)
		perfUmask(PORT_4,0x40,SANDY_BRIDGE)
		perfUmask(PORT_5,0x80,SANDY_BRIDGE)
	END_EVENT
	perfEvent(DISPATCHED,0xB1,SANDY_BRIDGE)
		perfUmask(THREAD,0x01,SANDY_BRIDGE)
		perfUmask(CORE,0x02,SANDY_BRIDGE)
	END_EVENT
	perfEvent(RETIRED,0xC2,SANDY_BRIDGE)
		perfUmask(ALL,0x01,SANDY_BRIDGE)
		perfUmask(RETIRE_SLOTS,0x02,SANDY_BRIDGE)
	END_EVENT
    };
};
